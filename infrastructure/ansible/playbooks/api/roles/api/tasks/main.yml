---
- name: Generate random container suffix
  set_fact:
    container_name: "api-{{ lookup('community.general.random_string', length=8, special=false, upper=false) }}"

- name: Create new api docker container
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    restart_policy: unless-stopped
    networks:
      - name: traefiknet
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: "Host(`safetynet-api-production.dump.hr`)"
      traefik.http.middlewares.api-retry.retry.attempts: "5"
      traefik.http.middlewares.api-retry.retry.initialinterval: "100ms"
      traefik.http.routers.api.middlewares: api-retry@docker
      # Setting a service property ensures that the generated service name will be consistent between versions
      traefik.http.services.api.loadbalancer.server.scheme: "http"

- name: Check if api docker container is healthy
  docker_container_info:
    name: "{{ container_name }}"
  register: api
  until: api.exists and api.container.State.Health.Status != 'starting'
  retries: 20
  delay: 5

- name: Remove new unhealthy api docker container
  docker_container:
    name: "{{ container_name }}"
    state: absent
  when: api.container.State.Health.Status != 'healthy'

- name: Remove old api docker container
  docker_container:
    name: api
    state: absent
  when: api.container.State.Health.Status == 'healthy'

- name: Rename new api docker container
  shell: docker rename "{{ container_name }}" api
  when: api.container.State.Health.Status == 'healthy'
